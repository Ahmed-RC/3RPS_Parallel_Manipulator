
FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001578  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001688  08001688  00002688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016a8  080016a8  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080016a8  080016a8  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080016a8  080016a8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016a8  080016a8  000026a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016ac  080016ac  000026ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080016b0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  2000000c  080016bc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  080016bc  00003fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003876  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efd  00000000  00000000  000068ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  000077a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000362  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a48  00000000  00000000  00007fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b24  00000000  00000000  0001e9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008644a  00000000  00000000  0002450e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001040  00000000  00000000  000aa99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ab9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001670 	.word	0x08001670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001670 	.word	0x08001670

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000028 	.word	0x20000028
 800017c:	2000007c 	.word	0x2000007c

08000180 <Task1>:
#include "timers.h"
#include "semphr.h"
#include "event_groups.h"


void Task1(void* argument) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	while(1)
		    {
		       GPIOB->ODR ^= (1<<10); // Toggle PB10
 8000188:	4b05      	ldr	r3, [pc, #20]	@ (80001a0 <Task1+0x20>)
 800018a:	68db      	ldr	r3, [r3, #12]
 800018c:	4a04      	ldr	r2, [pc, #16]	@ (80001a0 <Task1+0x20>)
 800018e:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000192:	60d3      	str	r3, [r2, #12]
		       vTaskDelay(pdMS_TO_TICKS(60)); // 10Hz -> 1/10 = 100ms -> delay each 50ms
 8000194:	203c      	movs	r0, #60	@ 0x3c
 8000196:	f000 faf7 	bl	8000788 <vTaskDelay>
		       GPIOB->ODR ^= (1<<10); // Toggle PB10
 800019a:	bf00      	nop
 800019c:	e7f4      	b.n	8000188 <Task1+0x8>
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <Task2>:
		    }
}
void Task2(void* argument) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	 while(1)
	    {
	        GPIOB->ODR ^= (1<<11); // Toggle PB11
 80001ac:	4b05      	ldr	r3, [pc, #20]	@ (80001c4 <Task2+0x20>)
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	4a04      	ldr	r2, [pc, #16]	@ (80001c4 <Task2+0x20>)
 80001b2:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 80001b6:	60d3      	str	r3, [r2, #12]
	        vTaskDelay(pdMS_TO_TICKS(20)); // 20Hz -> 1/20 = 50ms -> delay each 20ms
 80001b8:	2014      	movs	r0, #20
 80001ba:	f000 fae5 	bl	8000788 <vTaskDelay>
	        GPIOB->ODR ^= (1<<11); // Toggle PB11
 80001be:	bf00      	nop
 80001c0:	e7f4      	b.n	80001ac <Task2+0x8>
 80001c2:	bf00      	nop
 80001c4:	40010c00 	.word	0x40010c00

080001c8 <main>:
    }
}

int main() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80001ce:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <main+0x4c>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	4a10      	ldr	r2, [pc, #64]	@ (8000214 <main+0x4c>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6193      	str	r3, [r2, #24]
	GPIOB->CRH = 0x44442244;
 80001da:	4b0f      	ldr	r3, [pc, #60]	@ (8000218 <main+0x50>)
 80001dc:	4a0f      	ldr	r2, [pc, #60]	@ (800021c <main+0x54>)
 80001de:	605a      	str	r2, [r3, #4]
    xTaskCreate(Task1, "LED1 Task", 128, NULL, 1, NULL);
 80001e0:	2300      	movs	r3, #0
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	2301      	movs	r3, #1
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2300      	movs	r3, #0
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	490c      	ldr	r1, [pc, #48]	@ (8000220 <main+0x58>)
 80001ee:	480d      	ldr	r0, [pc, #52]	@ (8000224 <main+0x5c>)
 80001f0:	f000 f993 	bl	800051a <xTaskCreate>
    xTaskCreate(Task2, "LED2 Task", 128, NULL, 1, NULL);
 80001f4:	2300      	movs	r3, #0
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	2301      	movs	r3, #1
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2300      	movs	r3, #0
 80001fe:	2280      	movs	r2, #128	@ 0x80
 8000200:	4909      	ldr	r1, [pc, #36]	@ (8000228 <main+0x60>)
 8000202:	480a      	ldr	r0, [pc, #40]	@ (800022c <main+0x64>)
 8000204:	f000 f989 	bl	800051a <xTaskCreate>
    vTaskStartScheduler();
 8000208:	f000 faf4 	bl	80007f4 <vTaskStartScheduler>
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40021000 	.word	0x40021000
 8000218:	40010c00 	.word	0x40010c00
 800021c:	44442244 	.word	0x44442244
 8000220:	08001688 	.word	0x08001688
 8000224:	08000181 	.word	0x08000181
 8000228:	08001694 	.word	0x08001694
 800022c:	080001a5 	.word	0x080001a5

08000230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <NMI_Handler+0x4>

08000238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <HardFault_Handler+0x4>

08000240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000244:	bf00      	nop
 8000246:	e7fd      	b.n	8000244 <MemManage_Handler+0x4>

08000248 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <BusFault_Handler+0x4>

08000250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000254:	bf00      	nop
 8000256:	e7fd      	b.n	8000254 <UsageFault_Handler+0x4>

08000258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000268:	f000 f836 	bl	80002d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800026c:	f000 fdbc 	bl	8000de8 <xTaskGetSchedulerState>
 8000270:	4603      	mov	r3, r0
 8000272:	2b01      	cmp	r3, #1
 8000274:	d001      	beq.n	800027a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000276:	f000 ffa7 	bl	80011c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}

0800027e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
	...

0800028c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800028c:	f7ff fff7 	bl	800027e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480b      	ldr	r0, [pc, #44]	@ (80002c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000292:	490c      	ldr	r1, [pc, #48]	@ (80002c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000294:	4a0c      	ldr	r2, [pc, #48]	@ (80002c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a09      	ldr	r2, [pc, #36]	@ (80002cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002a8:	4c09      	ldr	r4, [pc, #36]	@ (80002d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002b6:	f001 f9b7 	bl	8001628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff85 	bl	80001c8 <main>
  bx lr
 80002be:	4770      	bx	lr
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002c8:	080016b0 	.word	0x080016b0
  ldr r2, =_sbss
 80002cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002d0:	20000fd4 	.word	0x20000fd4

080002d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <HAL_IncTick+0x1c>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <HAL_IncTick+0x20>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	4a03      	ldr	r2, [pc, #12]	@ (80002f8 <HAL_IncTick+0x20>)
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	20000004 	.word	0x20000004
 80002f8:	2000027c 	.word	0x2000027c

080002fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f103 0208 	add.w	r2, r3, #8
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f04f 32ff 	mov.w	r2, #4294967295
 8000314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f103 0208 	add.w	r2, r3, #8
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f103 0208 	add.w	r2, r3, #8
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr

08000352 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000352:	b480      	push	{r7}
 8000354:	b085      	sub	sp, #20
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	689a      	ldr	r2, [r3, #8]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	683a      	ldr	r2, [r7, #0]
 8000376:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d103      	bne.n	80003b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e00c      	b.n	80003d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3308      	adds	r3, #8
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e002      	b.n	80003c6 <vListInsert+0x2e>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d2f6      	bcs.n	80003c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	685a      	ldr	r2, [r3, #4]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	1c5a      	adds	r2, r3, #1
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6892      	ldr	r2, [r2, #8]
 800041e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	6852      	ldr	r2, [r2, #4]
 8000428:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	d103      	bne.n	800043c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	1e5a      	subs	r2, r3, #1
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	681b      	ldr	r3, [r3, #0]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800045a:	b580      	push	{r7, lr}
 800045c:	b08e      	sub	sp, #56	@ 0x38
 800045e:	af04      	add	r7, sp, #16
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800046a:	2b00      	cmp	r3, #0
 800046c:	d10b      	bne.n	8000486 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800046e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000472:	f383 8811 	msr	BASEPRI, r3
 8000476:	f3bf 8f6f 	isb	sy
 800047a:	f3bf 8f4f 	dsb	sy
 800047e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	e7fd      	b.n	8000482 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000488:	2b00      	cmp	r3, #0
 800048a:	d10b      	bne.n	80004a4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800048c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000490:	f383 8811 	msr	BASEPRI, r3
 8000494:	f3bf 8f6f 	isb	sy
 8000498:	f3bf 8f4f 	dsb	sy
 800049c:	61fb      	str	r3, [r7, #28]
}
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80004a4:	2354      	movs	r3, #84	@ 0x54
 80004a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	2b54      	cmp	r3, #84	@ 0x54
 80004ac:	d00b      	beq.n	80004c6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80004ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004b2:	f383 8811 	msr	BASEPRI, r3
 80004b6:	f3bf 8f6f 	isb	sy
 80004ba:	f3bf 8f4f 	dsb	sy
 80004be:	61bb      	str	r3, [r7, #24]
}
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	e7fd      	b.n	80004c2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80004c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80004c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d01e      	beq.n	800050c <xTaskCreateStatic+0xb2>
 80004ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d01b      	beq.n	800050c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80004d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004d6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80004d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004dc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80004de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e0:	2202      	movs	r2, #2
 80004e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80004e6:	2300      	movs	r3, #0
 80004e8:	9303      	str	r3, [sp, #12]
 80004ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	68f8      	ldr	r0, [r7, #12]
 8000500:	f000 f850 	bl	80005a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000504:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000506:	f000 f8d5 	bl	80006b4 <prvAddNewTaskToReadyList>
 800050a:	e001      	b.n	8000510 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8000510:	697b      	ldr	r3, [r7, #20]
	}
 8000512:	4618      	mov	r0, r3
 8000514:	3728      	adds	r7, #40	@ 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800051a:	b580      	push	{r7, lr}
 800051c:	b08c      	sub	sp, #48	@ 0x30
 800051e:	af04      	add	r7, sp, #16
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4613      	mov	r3, r2
 8000528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fe8e 	bl	8001250 <pvPortMalloc>
 8000534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d00e      	beq.n	800055a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800053c:	2054      	movs	r0, #84	@ 0x54
 800053e:	f000 fe87 	bl	8001250 <pvPortMalloc>
 8000542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d003      	beq.n	8000552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000550:	e005      	b.n	800055e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000552:	6978      	ldr	r0, [r7, #20]
 8000554:	f000 ff4a 	bl	80013ec <vPortFree>
 8000558:	e001      	b.n	800055e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d017      	beq.n	8000594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800056c:	88fa      	ldrh	r2, [r7, #6]
 800056e:	2300      	movs	r3, #0
 8000570:	9303      	str	r3, [sp, #12]
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	f000 f80e 	bl	80005a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000588:	69f8      	ldr	r0, [r7, #28]
 800058a:	f000 f893 	bl	80006b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	e002      	b.n	800059a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800059a:	69bb      	ldr	r3, [r7, #24]
	}
 800059c:	4618      	mov	r0, r3
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80005b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80005bc:	3b01      	subs	r3, #1
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	f023 0307 	bic.w	r3, r3, #7
 80005ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00b      	beq.n	80005ee <prvInitialiseNewTask+0x4a>
	__asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	617b      	str	r3, [r7, #20]
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d01f      	beq.n	8000634 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	e012      	b.n	8000620 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005fa:	68ba      	ldr	r2, [r7, #8]
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	4413      	add	r3, r2
 8000600:	7819      	ldrb	r1, [r3, #0]
 8000602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	4413      	add	r3, r2
 8000608:	3334      	adds	r3, #52	@ 0x34
 800060a:	460a      	mov	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3301      	adds	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	2b0f      	cmp	r3, #15
 8000624:	d9e9      	bls.n	80005fa <prvInitialiseNewTask+0x56>
 8000626:	e000      	b.n	800062a <prvInitialiseNewTask+0x86>
			{
				break;
 8000628:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800062a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000632:	e003      	b.n	800063c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800063c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800063e:	2b06      	cmp	r3, #6
 8000640:	d901      	bls.n	8000646 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000642:	2306      	movs	r3, #6
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800064c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800064e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000650:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000654:	2200      	movs	r2, #0
 8000656:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800065a:	3304      	adds	r3, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe6c 	bl	800033a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000664:	3318      	adds	r3, #24
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe67 	bl	800033a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800066c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800066e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000670:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000674:	f1c3 0207 	rsb	r2, r3, #7
 8000678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800067a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800067c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800067e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000684:	2200      	movs	r2, #0
 8000686:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	68f9      	ldr	r1, [r7, #12]
 8000694:	69b8      	ldr	r0, [r7, #24]
 8000696:	f000 fc2b 	bl	8000ef0 <pxPortInitialiseStack>
 800069a:	4602      	mov	r2, r0
 800069c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800069e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80006a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80006a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80006bc:	f000 fd06 	bl	80010cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <prvAddNewTaskToReadyList+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a29      	ldr	r2, [pc, #164]	@ (800076c <prvAddNewTaskToReadyList+0xb8>)
 80006c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <prvAddNewTaskToReadyList+0xbc>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d109      	bne.n	80006e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80006d2:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <prvAddNewTaskToReadyList+0xbc>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <prvAddNewTaskToReadyList+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d110      	bne.n	8000702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80006e0:	f000 fac4 	bl	8000c6c <prvInitialiseTaskLists>
 80006e4:	e00d      	b.n	8000702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <prvAddNewTaskToReadyList+0xc0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d109      	bne.n	8000702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <prvAddNewTaskToReadyList+0xbc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d802      	bhi.n	8000702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80006fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <prvAddNewTaskToReadyList+0xbc>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000702:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <prvAddNewTaskToReadyList+0xc4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <prvAddNewTaskToReadyList+0xc4>)
 800070a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000710:	2201      	movs	r2, #1
 8000712:	409a      	lsls	r2, r3
 8000714:	4b19      	ldr	r3, [pc, #100]	@ (800077c <prvAddNewTaskToReadyList+0xc8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4313      	orrs	r3, r2
 800071a:	4a18      	ldr	r2, [pc, #96]	@ (800077c <prvAddNewTaskToReadyList+0xc8>)
 800071c:	6013      	str	r3, [r2, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4a15      	ldr	r2, [pc, #84]	@ (8000780 <prvAddNewTaskToReadyList+0xcc>)
 800072c:	441a      	add	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3304      	adds	r3, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4610      	mov	r0, r2
 8000736:	f7ff fe0c 	bl	8000352 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800073a:	f000 fcf7 	bl	800112c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <prvAddNewTaskToReadyList+0xc0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00e      	beq.n	8000764 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <prvAddNewTaskToReadyList+0xbc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <prvAddNewTaskToReadyList+0xd0>)
 8000756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	f3bf 8f4f 	dsb	sy
 8000760:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000380 	.word	0x20000380
 8000770:	20000280 	.word	0x20000280
 8000774:	2000038c 	.word	0x2000038c
 8000778:	2000039c 	.word	0x2000039c
 800077c:	20000388 	.word	0x20000388
 8000780:	20000284 	.word	0x20000284
 8000784:	e000ed04 	.word	0xe000ed04

08000788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d018      	beq.n	80007cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <vTaskDelay+0x64>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00b      	beq.n	80007ba <vTaskDelay+0x32>
	__asm volatile
 80007a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a6:	f383 8811 	msr	BASEPRI, r3
 80007aa:	f3bf 8f6f 	isb	sy
 80007ae:	f3bf 8f4f 	dsb	sy
 80007b2:	60bb      	str	r3, [r7, #8]
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	e7fd      	b.n	80007b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80007ba:	f000 f87d 	bl	80008b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80007be:	2100      	movs	r1, #0
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fb2f 	bl	8000e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80007c6:	f000 f885 	bl	80008d4 <xTaskResumeAll>
 80007ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d107      	bne.n	80007e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <vTaskDelay+0x68>)
 80007d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	f3bf 8f4f 	dsb	sy
 80007de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200003a8 	.word	0x200003a8
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000802:	463a      	mov	r2, r7
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fca0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8000810:	6839      	ldr	r1, [r7, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	9202      	str	r2, [sp, #8]
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	2300      	movs	r3, #0
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	460a      	mov	r2, r1
 8000822:	491f      	ldr	r1, [pc, #124]	@ (80008a0 <vTaskStartScheduler+0xac>)
 8000824:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <vTaskStartScheduler+0xb0>)
 8000826:	f7ff fe18 	bl	800045a <xTaskCreateStatic>
 800082a:	4603      	mov	r3, r0
 800082c:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <vTaskStartScheduler+0xb4>)
 800082e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <vTaskStartScheduler+0xb4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e001      	b.n	8000842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d116      	bne.n	8000876 <vTaskStartScheduler+0x82>
	__asm volatile
 8000848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	613b      	str	r3, [r7, #16]
}
 800085a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <vTaskStartScheduler+0xb8>)
 800085e:	f04f 32ff 	mov.w	r2, #4294967295
 8000862:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <vTaskStartScheduler+0xbc>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <vTaskStartScheduler+0xc0>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000870:	f000 fbba 	bl	8000fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000874:	e00f      	b.n	8000896 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087c:	d10b      	bne.n	8000896 <vTaskStartScheduler+0xa2>
	__asm volatile
 800087e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000882:	f383 8811 	msr	BASEPRI, r3
 8000886:	f3bf 8f6f 	isb	sy
 800088a:	f3bf 8f4f 	dsb	sy
 800088e:	60fb      	str	r3, [r7, #12]
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	e7fd      	b.n	8000892 <vTaskStartScheduler+0x9e>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	080016a0 	.word	0x080016a0
 80008a4:	08000c3d 	.word	0x08000c3d
 80008a8:	200003a4 	.word	0x200003a4
 80008ac:	200003a0 	.word	0x200003a0
 80008b0:	2000038c 	.word	0x2000038c
 80008b4:	20000384 	.word	0x20000384

080008b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80008bc:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <vTaskSuspendAll+0x18>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a03      	ldr	r2, [pc, #12]	@ (80008d0 <vTaskSuspendAll+0x18>)
 80008c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200003a8 	.word	0x200003a8

080008d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <xTaskResumeAll+0x118>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10b      	bne.n	8000902 <xTaskResumeAll+0x2e>
	__asm volatile
 80008ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ee:	f383 8811 	msr	BASEPRI, r3
 80008f2:	f3bf 8f6f 	isb	sy
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	603b      	str	r3, [r7, #0]
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	e7fd      	b.n	80008fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000902:	f000 fbe3 	bl	80010cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000906:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <xTaskResumeAll+0x118>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3b01      	subs	r3, #1
 800090c:	4a37      	ldr	r2, [pc, #220]	@ (80009ec <xTaskResumeAll+0x118>)
 800090e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000910:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <xTaskResumeAll+0x118>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d161      	bne.n	80009dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000918:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <xTaskResumeAll+0x11c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d05d      	beq.n	80009dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000920:	e02e      	b.n	8000980 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000922:	4b34      	ldr	r3, [pc, #208]	@ (80009f4 <xTaskResumeAll+0x120>)
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3318      	adds	r3, #24
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fd6a 	bl	8000408 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3304      	adds	r3, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd65 	bl	8000408 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000942:	2201      	movs	r2, #1
 8000944:	409a      	lsls	r2, r3
 8000946:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <xTaskResumeAll+0x124>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4313      	orrs	r3, r2
 800094c:	4a2a      	ldr	r2, [pc, #168]	@ (80009f8 <xTaskResumeAll+0x124>)
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <xTaskResumeAll+0x128>)
 800095e:	441a      	add	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3304      	adds	r3, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4610      	mov	r0, r2
 8000968:	f7ff fcf3 	bl	8000352 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000970:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <xTaskResumeAll+0x12c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000976:	429a      	cmp	r2, r3
 8000978:	d302      	bcc.n	8000980 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800097a:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <xTaskResumeAll+0x130>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <xTaskResumeAll+0x120>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1cc      	bne.n	8000922 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800098e:	f000 fa0b 	bl	8000da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <xTaskResumeAll+0x134>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d010      	beq.n	80009c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800099e:	f000 f837 	bl	8000a10 <xTaskIncrementTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <xTaskResumeAll+0x130>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f1      	bne.n	800099e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <xTaskResumeAll+0x134>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <xTaskResumeAll+0x130>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d009      	beq.n	80009dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <xTaskResumeAll+0x138>)
 80009ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	f3bf 8f4f 	dsb	sy
 80009d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80009dc:	f000 fba6 	bl	800112c <vPortExitCritical>

	return xAlreadyYielded;
 80009e0:	68bb      	ldr	r3, [r7, #8]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200003a8 	.word	0x200003a8
 80009f0:	20000380 	.word	0x20000380
 80009f4:	20000340 	.word	0x20000340
 80009f8:	20000388 	.word	0x20000388
 80009fc:	20000284 	.word	0x20000284
 8000a00:	20000280 	.word	0x20000280
 8000a04:	20000394 	.word	0x20000394
 8000a08:	20000390 	.word	0x20000390
 8000a0c:	e000ed04 	.word	0xe000ed04

08000a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <xTaskIncrementTick+0x148>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 808f 	bne.w	8000b42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000a24:	4b4d      	ldr	r3, [pc, #308]	@ (8000b5c <xTaskIncrementTick+0x14c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8000b5c <xTaskIncrementTick+0x14c>)
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d121      	bne.n	8000a7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8000a38:	4b49      	ldr	r3, [pc, #292]	@ (8000b60 <xTaskIncrementTick+0x150>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00b      	beq.n	8000a5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8000a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a46:	f383 8811 	msr	BASEPRI, r3
 8000a4a:	f3bf 8f6f 	isb	sy
 8000a4e:	f3bf 8f4f 	dsb	sy
 8000a52:	603b      	str	r3, [r7, #0]
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	e7fd      	b.n	8000a56 <xTaskIncrementTick+0x46>
 8000a5a:	4b41      	ldr	r3, [pc, #260]	@ (8000b60 <xTaskIncrementTick+0x150>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b40      	ldr	r3, [pc, #256]	@ (8000b64 <xTaskIncrementTick+0x154>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a3e      	ldr	r2, [pc, #248]	@ (8000b60 <xTaskIncrementTick+0x150>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4a3e      	ldr	r2, [pc, #248]	@ (8000b64 <xTaskIncrementTick+0x154>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b68 <xTaskIncrementTick+0x158>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a3c      	ldr	r2, [pc, #240]	@ (8000b68 <xTaskIncrementTick+0x158>)
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	f000 f996 	bl	8000da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <xTaskIncrementTick+0x15c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d348      	bcc.n	8000b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a86:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <xTaskIncrementTick+0x150>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d104      	bne.n	8000a9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a90:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <xTaskIncrementTick+0x15c>)
 8000a92:	f04f 32ff 	mov.w	r2, #4294967295
 8000a96:	601a      	str	r2, [r3, #0]
					break;
 8000a98:	e03e      	b.n	8000b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <xTaskIncrementTick+0x150>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d203      	bcs.n	8000aba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8000b6c <xTaskIncrementTick+0x15c>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000ab8:	e02e      	b.n	8000b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	3304      	adds	r3, #4
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fca2 	bl	8000408 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d004      	beq.n	8000ad6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	3318      	adds	r3, #24
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fc99 	bl	8000408 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	2201      	movs	r2, #1
 8000adc:	409a      	lsls	r2, r3
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <xTaskIncrementTick+0x160>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <xTaskIncrementTick+0x160>)
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <xTaskIncrementTick+0x164>)
 8000af6:	441a      	add	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3304      	adds	r3, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4610      	mov	r0, r2
 8000b00:	f7ff fc27 	bl	8000352 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <xTaskIncrementTick+0x168>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3b9      	bcc.n	8000a86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b16:	e7b6      	b.n	8000a86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <xTaskIncrementTick+0x168>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b1e:	4915      	ldr	r1, [pc, #84]	@ (8000b74 <xTaskIncrementTick+0x164>)
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	440b      	add	r3, r1
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d901      	bls.n	8000b34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <xTaskIncrementTick+0x16c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d007      	beq.n	8000b4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e004      	b.n	8000b4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <xTaskIncrementTick+0x170>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <xTaskIncrementTick+0x170>)
 8000b4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000b4c:	697b      	ldr	r3, [r7, #20]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200003a8 	.word	0x200003a8
 8000b5c:	20000384 	.word	0x20000384
 8000b60:	20000338 	.word	0x20000338
 8000b64:	2000033c 	.word	0x2000033c
 8000b68:	20000398 	.word	0x20000398
 8000b6c:	200003a0 	.word	0x200003a0
 8000b70:	20000388 	.word	0x20000388
 8000b74:	20000284 	.word	0x20000284
 8000b78:	20000280 	.word	0x20000280
 8000b7c:	20000394 	.word	0x20000394
 8000b80:	20000390 	.word	0x20000390

08000b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b8a:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <vTaskSwitchContext+0xa4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000b92:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <vTaskSwitchContext+0xa8>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000b98:	e040      	b.n	8000c1c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <vTaskSwitchContext+0xa8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <vTaskSwitchContext+0xac>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000bae:	7afb      	ldrb	r3, [r7, #11]
 8000bb0:	f1c3 031f 	rsb	r3, r3, #31
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	491f      	ldr	r1, [pc, #124]	@ (8000c34 <vTaskSwitchContext+0xb0>)
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10b      	bne.n	8000be2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8000bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bce:	f383 8811 	msr	BASEPRI, r3
 8000bd2:	f3bf 8f6f 	isb	sy
 8000bd6:	f3bf 8f4f 	dsb	sy
 8000bda:	607b      	str	r3, [r7, #4]
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	e7fd      	b.n	8000bde <vTaskSwitchContext+0x5a>
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <vTaskSwitchContext+0xb0>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	3308      	adds	r3, #8
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d104      	bne.n	8000c12 <vTaskSwitchContext+0x8e>
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <vTaskSwitchContext+0xb4>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200003a8 	.word	0x200003a8
 8000c2c:	20000394 	.word	0x20000394
 8000c30:	20000388 	.word	0x20000388
 8000c34:	20000284 	.word	0x20000284
 8000c38:	20000280 	.word	0x20000280

08000c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000c44:	f000 f852 	bl	8000cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <prvIdleTask+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d9f9      	bls.n	8000c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <prvIdleTask+0x2c>)
 8000c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000c60:	e7f0      	b.n	8000c44 <prvIdleTask+0x8>
 8000c62:	bf00      	nop
 8000c64:	20000284 	.word	0x20000284
 8000c68:	e000ed04 	.word	0xe000ed04

08000c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	e00c      	b.n	8000c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <prvInitialiseTaskLists+0x60>)
 8000c84:	4413      	add	r3, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fb38 	bl	80002fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b06      	cmp	r3, #6
 8000c96:	d9ef      	bls.n	8000c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <prvInitialiseTaskLists+0x64>)
 8000c9a:	f7ff fb2f 	bl	80002fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000c9e:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <prvInitialiseTaskLists+0x68>)
 8000ca0:	f7ff fb2c 	bl	80002fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <prvInitialiseTaskLists+0x6c>)
 8000ca6:	f7ff fb29 	bl	80002fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000caa:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <prvInitialiseTaskLists+0x70>)
 8000cac:	f7ff fb26 	bl	80002fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000cb0:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <prvInitialiseTaskLists+0x74>)
 8000cb2:	f7ff fb23 	bl	80002fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <prvInitialiseTaskLists+0x78>)
 8000cb8:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <prvInitialiseTaskLists+0x64>)
 8000cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <prvInitialiseTaskLists+0x7c>)
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <prvInitialiseTaskLists+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	20000310 	.word	0x20000310
 8000cd4:	20000324 	.word	0x20000324
 8000cd8:	20000340 	.word	0x20000340
 8000cdc:	20000354 	.word	0x20000354
 8000ce0:	2000036c 	.word	0x2000036c
 8000ce4:	20000338 	.word	0x20000338
 8000ce8:	2000033c 	.word	0x2000033c

08000cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cf2:	e019      	b.n	8000d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8000cf4:	f000 f9ea 	bl	80010cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <prvCheckTasksWaitingTermination+0x50>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3304      	adds	r3, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fb7f 	bl	8000408 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <prvCheckTasksWaitingTermination+0x54>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <prvCheckTasksWaitingTermination+0x54>)
 8000d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <prvCheckTasksWaitingTermination+0x58>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <prvCheckTasksWaitingTermination+0x58>)
 8000d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8000d1e:	f000 fa05 	bl	800112c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f810 	bl	8000d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <prvCheckTasksWaitingTermination+0x58>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e1      	bne.n	8000cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000354 	.word	0x20000354
 8000d40:	20000380 	.word	0x20000380
 8000d44:	20000368 	.word	0x20000368

08000d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d108      	bne.n	8000d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fb44 	bl	80013ec <vPortFree>
				vPortFree( pxTCB );
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 fb41 	bl	80013ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000d6a:	e019      	b.n	8000da0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d103      	bne.n	8000d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 fb38 	bl	80013ec <vPortFree>
	}
 8000d7c:	e010      	b.n	8000da0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d00b      	beq.n	8000da0 <prvDeleteTCB+0x58>
	__asm volatile
 8000d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 8000d90:	f3bf 8f6f 	isb	sy
 8000d94:	f3bf 8f4f 	dsb	sy
 8000d98:	60fb      	str	r3, [r7, #12]
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <prvDeleteTCB+0x54>
	}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <prvResetNextTaskUnblockTime+0x38>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d104      	bne.n	8000dc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <prvResetNextTaskUnblockTime+0x3c>)
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000dc0:	e008      	b.n	8000dd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <prvResetNextTaskUnblockTime+0x38>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <prvResetNextTaskUnblockTime+0x3c>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000338 	.word	0x20000338
 8000de4:	200003a0 	.word	0x200003a0

08000de8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <xTaskGetSchedulerState+0x34>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8000df6:	2301      	movs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	e008      	b.n	8000e0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <xTaskGetSchedulerState+0x38>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8000e04:	2302      	movs	r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	e001      	b.n	8000e0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8000e0e:	687b      	ldr	r3, [r7, #4]
	}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000038c 	.word	0x2000038c
 8000e20:	200003a8 	.word	0x200003a8

08000e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000e2e:	4b29      	ldr	r3, [pc, #164]	@ (8000ed4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fae4 	bl	8000408 <uxListRemove>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10b      	bne.n	8000e5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	4a20      	ldr	r2, [pc, #128]	@ (8000edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8000e5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d10a      	bne.n	8000e7c <prvAddCurrentTaskToDelayedList+0x58>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3304      	adds	r3, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	481a      	ldr	r0, [pc, #104]	@ (8000ee0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8000e76:	f7ff fa6c 	bl	8000352 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000e7a:	e026      	b.n	8000eca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d209      	bcs.n	8000ea8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	f7ff fa79 	bl	8000398 <vListInsert>
}
 8000ea6:	e010      	b.n	8000eca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	f7ff fa6f 	bl	8000398 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d202      	bcs.n	8000eca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8000ec4:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000384 	.word	0x20000384
 8000ed8:	20000280 	.word	0x20000280
 8000edc:	20000388 	.word	0x20000388
 8000ee0:	2000036c 	.word	0x2000036c
 8000ee4:	2000033c 	.word	0x2000033c
 8000ee8:	20000338 	.word	0x20000338
 8000eec:	200003a0 	.word	0x200003a0

08000ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3b04      	subs	r3, #4
 8000f00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3b04      	subs	r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f023 0201 	bic.w	r2, r3, #1
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3b04      	subs	r3, #4
 8000f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000f20:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <pxPortInitialiseStack+0x54>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3b14      	subs	r3, #20
 8000f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3b20      	subs	r3, #32
 8000f36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	08000f49 	.word	0x08000f49

08000f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <prvTaskExitError+0x54>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5a:	d00b      	beq.n	8000f74 <prvTaskExitError+0x2c>
	__asm volatile
 8000f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f60:	f383 8811 	msr	BASEPRI, r3
 8000f64:	f3bf 8f6f 	isb	sy
 8000f68:	f3bf 8f4f 	dsb	sy
 8000f6c:	60fb      	str	r3, [r7, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <prvTaskExitError+0x28>
	__asm volatile
 8000f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f78:	f383 8811 	msr	BASEPRI, r3
 8000f7c:	f3bf 8f6f 	isb	sy
 8000f80:	f3bf 8f4f 	dsb	sy
 8000f84:	60bb      	str	r3, [r7, #8]
}
 8000f86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000f88:	bf00      	nop
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0fc      	beq.n	8000f8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <pxCurrentTCBConst2>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	6808      	ldr	r0, [r1, #0]
 8000fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000faa:	f380 8809 	msr	PSP, r0
 8000fae:	f3bf 8f6f 	isb	sy
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	f380 8811 	msr	BASEPRI, r0
 8000fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8000fbe:	4770      	bx	lr

08000fc0 <pxCurrentTCBConst2>:
 8000fc0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop

08000fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000fc8:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <prvPortStartFirstTask+0x1c>)
 8000fca:	6800      	ldr	r0, [r0, #0]
 8000fcc:	6800      	ldr	r0, [r0, #0]
 8000fce:	f380 8808 	msr	MSP, r0
 8000fd2:	b662      	cpsie	i
 8000fd4:	b661      	cpsie	f
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	df00      	svc	0
 8000fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000fe2:	bf00      	nop
 8000fe4:	e000ed08 	.word	0xe000ed08

08000fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000fee:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <xPortStartScheduler+0xd0>)
 8000ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	22ff      	movs	r2, #255	@ 0xff
 8000ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <xPortStartScheduler+0xd4>)
 8001014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <xPortStartScheduler+0xd8>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800101c:	e009      	b.n	8001032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <xPortStartScheduler+0xd8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3b01      	subs	r3, #1
 8001024:	4a26      	ldr	r2, [pc, #152]	@ (80010c0 <xPortStartScheduler+0xd8>)
 8001026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103a:	2b80      	cmp	r3, #128	@ 0x80
 800103c:	d0ef      	beq.n	800101e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <xPortStartScheduler+0xd8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	d00b      	beq.n	8001062 <xPortStartScheduler+0x7a>
	__asm volatile
 800104a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800104e:	f383 8811 	msr	BASEPRI, r3
 8001052:	f3bf 8f6f 	isb	sy
 8001056:	f3bf 8f4f 	dsb	sy
 800105a:	60bb      	str	r3, [r7, #8]
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	e7fd      	b.n	800105e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <xPortStartScheduler+0xd8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	4a15      	ldr	r2, [pc, #84]	@ (80010c0 <xPortStartScheduler+0xd8>)
 800106a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <xPortStartScheduler+0xd8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001074:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <xPortStartScheduler+0xd8>)
 8001076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <xPortStartScheduler+0xdc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <xPortStartScheduler+0xdc>)
 8001086:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800108c:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <xPortStartScheduler+0xdc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <xPortStartScheduler+0xdc>)
 8001092:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001098:	f000 f8b8 	bl	800120c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <xPortStartScheduler+0xe0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80010a2:	f7ff ff91 	bl	8000fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80010a6:	f7ff fd6d 	bl	8000b84 <vTaskSwitchContext>
	prvTaskExitError();
 80010aa:	f7ff ff4d 	bl	8000f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	e000e400 	.word	0xe000e400
 80010bc:	200003ac 	.word	0x200003ac
 80010c0:	200003b0 	.word	0x200003b0
 80010c4:	e000ed20 	.word	0xe000ed20
 80010c8:	20000008 	.word	0x20000008

080010cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
	__asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	607b      	str	r3, [r7, #4]
}
 80010e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <vPortEnterCritical+0x58>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <vPortEnterCritical+0x58>)
 80010ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <vPortEnterCritical+0x58>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d110      	bne.n	800111a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <vPortEnterCritical+0x5c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <vPortEnterCritical+0x4e>
	__asm volatile
 8001102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001106:	f383 8811 	msr	BASEPRI, r3
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	603b      	str	r3, [r7, #0]
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	e7fd      	b.n	8001116 <vPortEnterCritical+0x4a>
	}
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000008 	.word	0x20000008
 8001128:	e000ed04 	.word	0xe000ed04

0800112c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <vPortExitCritical+0x50>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10b      	bne.n	8001152 <vPortExitCritical+0x26>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	607b      	str	r3, [r7, #4]
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <vPortExitCritical+0x50>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <vPortExitCritical+0x50>)
 800115a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <vPortExitCritical+0x50>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <vPortExitCritical+0x44>
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800116e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001180:	f3ef 8009 	mrs	r0, PSP
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <pxCurrentTCBConst>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001190:	6010      	str	r0, [r2, #0]
 8001192:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001196:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800119a:	f380 8811 	msr	BASEPRI, r0
 800119e:	f7ff fcf1 	bl	8000b84 <vTaskSwitchContext>
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	f380 8811 	msr	BASEPRI, r0
 80011aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	6808      	ldr	r0, [r1, #0]
 80011b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011b6:	f380 8809 	msr	PSP, r0
 80011ba:	f3bf 8f6f 	isb	sy
 80011be:	4770      	bx	lr

080011c0 <pxCurrentTCBConst>:
 80011c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop

080011c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	__asm volatile
 80011ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	607b      	str	r3, [r7, #4]
}
 80011e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80011e2:	f7ff fc15 	bl	8000a10 <xTaskIncrementTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <xPortSysTickHandler+0x40>)
 80011ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f383 8811 	msr	BASEPRI, r3
}
 80011fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	e000ed04 	.word	0xe000ed04

0800120c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <vPortSetupTimerInterrupt+0x30>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <vPortSetupTimerInterrupt+0x34>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <vPortSetupTimerInterrupt+0x38>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <vPortSetupTimerInterrupt+0x3c>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	4a08      	ldr	r2, [pc, #32]	@ (800124c <vPortSetupTimerInterrupt+0x40>)
 800122a:	3b01      	subs	r3, #1
 800122c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800122e:	4b03      	ldr	r3, [pc, #12]	@ (800123c <vPortSetupTimerInterrupt+0x30>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	e000e010 	.word	0xe000e010
 8001240:	e000e018 	.word	0xe000e018
 8001244:	20000000 	.word	0x20000000
 8001248:	10624dd3 	.word	0x10624dd3
 800124c:	e000e014 	.word	0xe000e014

08001250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800125c:	f7ff fb2c 	bl	80008b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001260:	4b5c      	ldr	r3, [pc, #368]	@ (80013d4 <pvPortMalloc+0x184>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001268:	f000 f924 	bl	80014b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800126c:	4b5a      	ldr	r3, [pc, #360]	@ (80013d8 <pvPortMalloc+0x188>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 8095 	bne.w	80013a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01e      	beq.n	80012be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001280:	2208      	movs	r2, #8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	2b00      	cmp	r3, #0
 8001290:	d015      	beq.n	80012be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f023 0307 	bic.w	r3, r3, #7
 8001298:	3308      	adds	r3, #8
 800129a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <pvPortMalloc+0x6e>
	__asm volatile
 80012a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012aa:	f383 8811 	msr	BASEPRI, r3
 80012ae:	f3bf 8f6f 	isb	sy
 80012b2:	f3bf 8f4f 	dsb	sy
 80012b6:	617b      	str	r3, [r7, #20]
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	e7fd      	b.n	80012ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d06f      	beq.n	80013a4 <pvPortMalloc+0x154>
 80012c4:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <pvPortMalloc+0x18c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d86a      	bhi.n	80013a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80012ce:	4b44      	ldr	r3, [pc, #272]	@ (80013e0 <pvPortMalloc+0x190>)
 80012d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80012d2:	4b43      	ldr	r3, [pc, #268]	@ (80013e0 <pvPortMalloc+0x190>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012d8:	e004      	b.n	80012e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d903      	bls.n	80012f6 <pvPortMalloc+0xa6>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f1      	bne.n	80012da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80012f6:	4b37      	ldr	r3, [pc, #220]	@ (80013d4 <pvPortMalloc+0x184>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d051      	beq.n	80013a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2208      	movs	r2, #8
 8001306:	4413      	add	r3, r2
 8001308:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1ad2      	subs	r2, r2, r3
 800131a:	2308      	movs	r3, #8
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	429a      	cmp	r2, r3
 8001320:	d920      	bls.n	8001364 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <pvPortMalloc+0xfc>
	__asm volatile
 8001334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001338:	f383 8811 	msr	BASEPRI, r3
 800133c:	f3bf 8f6f 	isb	sy
 8001340:	f3bf 8f4f 	dsb	sy
 8001344:	613b      	str	r3, [r7, #16]
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800135e:	69b8      	ldr	r0, [r7, #24]
 8001360:	f000 f90a 	bl	8001578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <pvPortMalloc+0x18c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <pvPortMalloc+0x18c>)
 8001370:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <pvPortMalloc+0x18c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <pvPortMalloc+0x194>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d203      	bcs.n	8001386 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <pvPortMalloc+0x18c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <pvPortMalloc+0x194>)
 8001384:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <pvPortMalloc+0x188>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	431a      	orrs	r2, r3
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <pvPortMalloc+0x198>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <pvPortMalloc+0x198>)
 80013a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80013a4:	f7ff fa96 	bl	80008d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <pvPortMalloc+0x17a>
	__asm volatile
 80013b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013b6:	f383 8811 	msr	BASEPRI, r3
 80013ba:	f3bf 8f6f 	isb	sy
 80013be:	f3bf 8f4f 	dsb	sy
 80013c2:	60fb      	str	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	e7fd      	b.n	80013c6 <pvPortMalloc+0x176>
	return pvReturn;
 80013ca:	69fb      	ldr	r3, [r7, #28]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000fbc 	.word	0x20000fbc
 80013d8:	20000fd0 	.word	0x20000fd0
 80013dc:	20000fc0 	.word	0x20000fc0
 80013e0:	20000fb4 	.word	0x20000fb4
 80013e4:	20000fc4 	.word	0x20000fc4
 80013e8:	20000fc8 	.word	0x20000fc8

080013ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04f      	beq.n	800149e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80013fe:	2308      	movs	r3, #8
 8001400:	425b      	negs	r3, r3
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <vPortFree+0xbc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10b      	bne.n	8001432 <vPortFree+0x46>
	__asm volatile
 800141a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800141e:	f383 8811 	msr	BASEPRI, r3
 8001422:	f3bf 8f6f 	isb	sy
 8001426:	f3bf 8f4f 	dsb	sy
 800142a:	60fb      	str	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <vPortFree+0x66>
	__asm volatile
 800143a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800143e:	f383 8811 	msr	BASEPRI, r3
 8001442:	f3bf 8f6f 	isb	sy
 8001446:	f3bf 8f4f 	dsb	sy
 800144a:	60bb      	str	r3, [r7, #8]
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	e7fd      	b.n	800144e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <vPortFree+0xbc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01e      	beq.n	800149e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d11a      	bne.n	800149e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <vPortFree+0xbc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001478:	f7ff fa1e 	bl	80008b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <vPortFree+0xc0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4413      	add	r3, r2
 8001486:	4a09      	ldr	r2, [pc, #36]	@ (80014ac <vPortFree+0xc0>)
 8001488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800148a:	6938      	ldr	r0, [r7, #16]
 800148c:	f000 f874 	bl	8001578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <vPortFree+0xc4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <vPortFree+0xc4>)
 8001498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800149a:	f7ff fa1b 	bl	80008d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000fd0 	.word	0x20000fd0
 80014ac:	20000fc0 	.word	0x20000fc0
 80014b0:	20000fcc 	.word	0x20000fcc

080014b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80014ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80014c0:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <prvHeapInit+0xac>)
 80014c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3307      	adds	r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f023 0307 	bic.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001560 <prvHeapInit+0xac>)
 80014e4:	4413      	add	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80014ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <prvHeapInit+0xb0>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <prvHeapInit+0xb0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001500:	2208      	movs	r2, #8
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f023 0307 	bic.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <prvHeapInit+0xb4>)
 8001514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <prvHeapInit+0xb4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <prvHeapInit+0xb4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	1ad2      	subs	r2, r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <prvHeapInit+0xb4>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <prvHeapInit+0xb8>)
 8001542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <prvHeapInit+0xbc>)
 800154a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <prvHeapInit+0xc0>)
 800154e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200003b4 	.word	0x200003b4
 8001564:	20000fb4 	.word	0x20000fb4
 8001568:	20000fbc 	.word	0x20000fbc
 800156c:	20000fc4 	.word	0x20000fc4
 8001570:	20000fc0 	.word	0x20000fc0
 8001574:	20000fd0 	.word	0x20000fd0

08001578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <prvInsertBlockIntoFreeList+0xa8>)
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e002      	b.n	800158c <prvInsertBlockIntoFreeList+0x14>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	d8f7      	bhi.n	8001586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d108      	bne.n	80015ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	441a      	add	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	441a      	add	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d118      	bne.n	8001600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <prvInsertBlockIntoFreeList+0xac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d00d      	beq.n	80015f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	441a      	add	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e008      	b.n	8001608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <prvInsertBlockIntoFreeList+0xac>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e003      	b.n	8001608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d002      	beq.n	8001616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000fb4 	.word	0x20000fb4
 8001624:	20000fbc 	.word	0x20000fbc

08001628 <__libc_init_array>:
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	2600      	movs	r6, #0
 800162c:	4d0c      	ldr	r5, [pc, #48]	@ (8001660 <__libc_init_array+0x38>)
 800162e:	4c0d      	ldr	r4, [pc, #52]	@ (8001664 <__libc_init_array+0x3c>)
 8001630:	1b64      	subs	r4, r4, r5
 8001632:	10a4      	asrs	r4, r4, #2
 8001634:	42a6      	cmp	r6, r4
 8001636:	d109      	bne.n	800164c <__libc_init_array+0x24>
 8001638:	f000 f81a 	bl	8001670 <_init>
 800163c:	2600      	movs	r6, #0
 800163e:	4d0a      	ldr	r5, [pc, #40]	@ (8001668 <__libc_init_array+0x40>)
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <__libc_init_array+0x44>)
 8001642:	1b64      	subs	r4, r4, r5
 8001644:	10a4      	asrs	r4, r4, #2
 8001646:	42a6      	cmp	r6, r4
 8001648:	d105      	bne.n	8001656 <__libc_init_array+0x2e>
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001650:	4798      	blx	r3
 8001652:	3601      	adds	r6, #1
 8001654:	e7ee      	b.n	8001634 <__libc_init_array+0xc>
 8001656:	f855 3b04 	ldr.w	r3, [r5], #4
 800165a:	4798      	blx	r3
 800165c:	3601      	adds	r6, #1
 800165e:	e7f2      	b.n	8001646 <__libc_init_array+0x1e>
 8001660:	080016a8 	.word	0x080016a8
 8001664:	080016a8 	.word	0x080016a8
 8001668:	080016a8 	.word	0x080016a8
 800166c:	080016ac 	.word	0x080016ac

08001670 <_init>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr

0800167c <_fini>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	bf00      	nop
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr
